<?php

namespace ISC\PlatformBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ActiviteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActiviteRepository extends EntityRepository
{
    /**
     * @param $idUser
     * @param $listIdFriend
     * @return array
     */
    public function getActivites($idUser, $listIdFriend)
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where('a.user = :idUser')
            ->setParameter('idUser', $idUser);
        $nbFriend = (count($listIdFriend));
        for ($i=0; $i < $nbFriend; $i++) {
            $qb
                ->orWhere('a.user = :friendId'.$listIdFriend[$i])
                ->setParameter('friendId'.$listIdFriend[$i], $listIdFriend[$i]);
        }
        $qb
            ->andWhere('a.approved = true')
            ->leftJoin('a.image', 'image')
            ->addSelect('image')
            ->orderBy('a.datetimeActivity', 'DESC')
            ->setMaxResults(5);
        return $qb
            ->getQuery()
            ->getResult();
    }

    /**
     * @param $idUser
     * @param $listIdFriend
     * @return array
     */
    public function getTotalActivite($idUser, $listIdFriend)
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where('a.user = :idUser')
            ->setParameter('idUser', $idUser);
        $nbFriend = (count($listIdFriend));
        for ($i=0; $i < $nbFriend; $i++) {
            $qb
                ->orWhere('a.user = :friendId'.$listIdFriend[$i])
                ->setParameter('friendId'.$listIdFriend[$i], $listIdFriend[$i]);
        }
        $qb
            ->orderBy('a.datetimeActivity', 'DESC');
        return $qb->getQuery()->getResult();
    }

    /**
     * @param $idUser
     * @return array
     */
    public function getTotalMyActivite($idUser)
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where('a.user = :idUser')
            ->setParameter('idUser', $idUser)
            ->orderBy('a.datetimeActivity', 'DESC');
        return $qb->getQuery()->getResult();
    }

    /**
     * @param $idUser
     * @param $listIdFriend
     * @param $lastIdActu
     * @return array
     */
    public function getActivitesAfterId($idUser, $listIdFriend, $lastIdActu)
    {
        $qb = $this->createQueryBuilder('a');
        $qb
            ->where('a.user = :idUser')
            ->setParameter('idUser', $idUser);
        $nbFriend = (count($listIdFriend));
        for ($i=0; $i < $nbFriend; $i++) {
            $qb
                ->orWhere('a.user = :friendId'.$listIdFriend[$i])
                ->setParameter('friendId'.$listIdFriend[$i], $listIdFriend[$i]);
        }
        $qb
            ->andWhere('a.id < :lastIdActu')
            ->setParameter('lastIdActu', $lastIdActu)
            ->andWhere('a.approved = true')
            ->leftJoin('a.image', 'image')
            ->addSelect('image')
            ->leftJoin('a.user', 'user')
            ->addSelect('user')
            ->leftJoin('a.likes', 'likes')
            ->addSelect('likes')
            ->orderBy('a.datetimeActivity', 'DESC')
            ->setMaxResults(5);
        return $qb
            ->getQuery()
            ->getResult();
    }
}
